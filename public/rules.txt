//Old Rules : Expire in 30 days on 29 june 2024 since firestore created on 29 may 2024 

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2024, 6, 29);
    }
  }
}

Deny  Rules: Not to do but could see permission denied by this: "false" stmt
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
	  allow read, write: if false;
    }
  }
}


//New Rules:

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
	  allow read, write: if request.auth != null;
    }
  }
}

??NEW RULES Recent most:

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
	    allow write: if request.auth != null;
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
    }
  }
}



??NEWEST RULES:
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function userIsAuthorOfPost() {
      return request.auth.uid == resource.data.uid;
    }
    
    match /{document=**} {
	    allow write: if isSignedIn();
      allow read: if isSignedIn() && userIsAuthorOfPost();
    }
  }
}


//NEW AGAIN
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function userIsAuthorOfPost() {
      return request.auth.uid == resource.data.uid;
    }
    
    match /{document=**} {
	    allow create: if isSignedIn();
      allow update: if isSignedIn() && userIsAuthorOfPost();
      allow read: if isSignedIn() && userIsAuthorOfPost();
    }
  }
}


//NEWEST

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function userIsAuthorOfPost() {
      return request.auth.uid == resource.data.uid;
    }
    
    match /{document=**} {
	    allow create: if isSignedIn();
      allow read: if isSignedIn() && userIsAuthorOfPost();
      allow update: if isSignedIn() && userIsAuthorOfPost();
      allow delete: if isSignedIn() && userIsAuthorOfPost();
    }
  }
}